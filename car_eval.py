# -*- coding: utf-8 -*-
"""newint247project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YwsVgxIrIBuBEQ2KWMHwWH29kH5YBycp
"""

import pandas as pd

from google.colab import files 
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

df = pd.read_csv('car_evaluation.csv', header = None)
df

df.columns = ["buying", "maintenance", "no_doors", "no_persons", "luggage_boot", "safety", "class"]
df

X = df.drop(['class'], axis=1)

y = df['class']

X.dtypes

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

print(X.shape)
print(x_train.shape)
print(x_test.shape)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
x_train['buying']=le.fit_transform(x_train['buying'])
x_train['maintenance']=le.fit_transform(x_train['maintenance'])
x_train['luggage_boot']=le.fit_transform(x_train['luggage_boot'])
x_train['safety']=le.fit_transform(x_train['safety'])
x_train['no_doors']=le.fit_transform(x_train['no_doors'])
x_train['no_persons']=le.fit_transform(x_train['no_persons'])

x_test['buying']=le.fit_transform(x_test['buying'])
x_test['maintenance']=le.fit_transform(x_test['maintenance'])
x_test['luggage_boot']=le.fit_transform(x_test['luggage_boot'])
x_test['safety']=le.fit_transform(x_test['safety'])
x_test['no_doors']=le.fit_transform(x_test['no_doors'])
x_test['no_persons']=le.fit_transform(x_test['no_persons'])

print(x_train.head)
print(x_test.head)

import numpy as np
a = np.array(df)
unique, counts = np.unique(a, return_counts=True)
dict(zip(unique, counts))

print(x_train)

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(n_estimators=100,max_depth=5)

rfc.fit(x_train,y_train)
y_pred_train=rfc.predict(x_train)
y_pred_test=rfc.predict(x_test)

print('Number of test samples misclassified=',(y_test!=y_pred_test).sum())

from sklearn.metrics import accuracy_score
train_acc=accuracy_score(y_train,y_pred_train)
test_acc=accuracy_score(y_test,y_pred_test)
print('Training Accuracy: ',train_acc)
print('Testing Accuracy: ',test_acc)

from sklearn.neighbors import KNeighborsClassifier
knc=KNeighborsClassifier(n_neighbors=3)

from sklearn.tree import DecisionTreeClassifier
dtc=DecisionTreeClassifier(max_depth=10)

knc.fit(x_train,y_train)
y_pred_train=rfc.predict(x_train)
y_pred_test=rfc.predict(x_test)

train_acc=accuracy_score(y_train,y_pred_train)
test_acc=accuracy_score(y_test,y_pred_test)
print('Training Accuracy: ',train_acc)
print('Testing Accuracy: ',test_acc)

dtc.fit(x_train,y_train)
y_pred_train=rfc.predict(x_train)
y_pred_test=rfc.predict(x_test)

train_acc=accuracy_score(y_train,y_pred_train)
test_acc=accuracy_score(y_test,y_pred_test)
print('Training Accuracy: ',train_acc)
print('Testing Accuracy: ',test_acc)

from sklearn.metrics import classification_report
cr=classification_report(y_test,y_pred_test)
print(cr)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred_test)
print(cm)
from sklearn.metrics import plot_confusion_matrix
plot_confusion_matrix(rfc,x_test,y_test)

plot_confusion_matrix(knc,x_test,y_test)

plot_confusion_matrix(dtc,x_test,y_test)